spring:
  datasource:
    url: ${DB_URL}
    username: ${DB_USER}
    password: ${DB_PASS}
  application:
    name: telegram
  kafka:
    consumer:
      auto-offset-reset: earliest
  cloud:
    function:
      definition: coreDataEvent
    stream:
      kafka:
        binder:
          brokers: ${BROKER_URL}
          producer-properties:
            key.serializer: org.apache.kafka.common.serialization.StringSerializer
      default:
        content-type: message/protobuf-json
      bindings:
        coreDataEvent-in-0:
          destination: core.data.event
          group: ${spring.application.name}
        telegramDataCmd-out-0:
          destination: telegram.data.command

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
